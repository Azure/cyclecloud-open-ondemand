---
httpd_auth:
- AuthType openid-connect
- Require valid-user

# Configuration for Entra ID with Federated Identity
# 1 - Create and attach a User Managed Identity for the OOD VM
# 2 - Create a new application in Entra ID
# 3 - Configure the application with the following settings:
#     - Redirect URI: https://{{ ood_fqdn }}/oidc
#     - Check the ID tokens in Implicit grant and hybrid flows
#     - In Token Configuration add an optional claim
#         - Token Type: ID
#         - Check 'upn' in the claim list or add a custom claim if you want to use another claim
#     - Check 'Turn on the Microsoft Graph profile permission (required for claims to appear in token).'
#     - In Certificate & Secrets, add a Federated Credentials using the OOD VM User Managed Identity, leave the default audience to api://AzureADTokenExchange

ood_auth_openidc:
  OIDCProviderMetadataURL: 'https://login.microsoftonline.com/{{tenant_id}}/v2.0/.well-known/openid-configuration'
  OIDCClientID: '{{ client_id }}'
  OIDCResponseType: 'id_token'
  OIDCRemoteUserClaim: '{{ user_claim }}'
  OIDCScope: 'openid profile'
  OIDCCryptoPassphrase: "exec:/bin/bash -c \"head /dev/urandom | tr -dc A-Za-z0-9 | head -c 32\""
  OIDCPassIDTokenAs: 'serialized'
  OIDCPassRefreshToken: 'On'
  OIDCPassClaimsAs: 'environment'
  OIDCStateMaxNumberOfCookies: [7, true]

logout_redirect: "/oidc?logout=https%3A%2F%2F{{ ood_fqdn }}"
oidc_uri: /oidc

# User mapping entra_map_match regex, to extract the username from the user_claim claim
# if empty, the full user_claim value will be used as username
user_map_match: "{{ '^([^@]+)@' + entra_map_match + '$' if entra_map_match else '' }}"

#user_map_match: '^([^@]+)@{{ entra_map_match }}$'
